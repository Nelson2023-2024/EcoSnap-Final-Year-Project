upstream ecosnap_backend {
    server ecosnap-backend:8080;
}

server {
    # 🌐 Step 1: Tell Nginx to listen for incoming web traffic on port 80 (HTTP)
    # Port 80 is the default port browsers use for normal web requests.
    listen 80;


    # 🚪 Step 2: This defines what happens when someone visits your server and requests a path starting with /api
    # For example: http://your-server.com/api/users
    location /api {

        # 🔁 Step 3: Forward (proxy) all those /api requests to your Node.js container
        # In Docker, each service gets an internal hostname equal to its service name (here "express-backend").
        # So this line says: send requests to the container named "express-backend" on port 8080.
        proxy_pass http://ecosnap_backend;

        # 🧾 Step 4: Pass along the original client's IP address
        # This way your Node.js app can log or identify who made the request.
        proxy_set_header X-Real-IP $remote_addr;

        # 🧭 Step 5: Add a chain of all IP addresses the request has passed through
        # Useful for debugging or analytics if your app is behind multiple proxies (like load balancers).
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # 🏷️ Step 6: Preserve the original Host header (the domain name the client requested)
        # This ensures your backend knows what domain was requested.
        proxy_set_header Host $http_host;

        # ⚙️ Step 7: Mark this request as being forwarded by Nginx
        proxy_set_header X-Nginx-Proxy true;

        # 🚫 Step 8: Disable automatic redirects
        # Prevents Nginx from rewriting redirect URLs that come from your Node.js app.
        proxy_redirect http://ecosnap_backend/ /;
    }
}